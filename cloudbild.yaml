steps:
  # Step 1: Get the current version number (if exists) from Artifact Registry
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION=$(gcloud artifacts repositories describe \
          --repository=web-app \
          --location=us-central1 \
          --format='value(format.metadata."google.containeranalysis.occurrence.version".version)')
        if [ -z "$VERSION" ]; then
          VERSION="0.0.1"
        else
          # Increment the version number (assuming it follows semantic versioning)
          # Replace this logic with your preferred versioning scheme if necessary
          MAJOR=$(echo "$VERSION" | cut -d'.' -f1)
          MINOR=$(echo "$VERSION" | cut -d'.' -f2)
          PATCH=$(echo "$VERSION" | cut -d'.' -f3)
          PATCH=$((PATCH + 1))
          VERSION="$MAJOR.$MINOR.$PATCH"
        fi
        echo "VERSION=$VERSION" > /workspace/env.txt
    id: 'increment-version'
    volumes:
      - name: 'workspace'
        path: '/workspace'

  # Step 2: Build the Docker image with the incremented version tag
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/web-app/web-app:$VERSION'
      - '.'
  # Step 3: Push the Docker image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/web-app/web-app:$VERSION'

images:
  # Specify the image to be pushed to Google Container Registry with the incremented tag
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/web-app/web-app:$VERSION'

# Continuous Deployment (CD) Steps
steps:
  # Step 4: Fetch GKE credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'your-gke-cluster-name'
      - '--zone=your-gke-cluster-zone'

  # Step 5: Apply the Kubernetes Deployment
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'deployment.yaml'

  # Step 6: Apply the Kubernetes Service
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'service.yaml'
